# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'jira.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

import multiprocessing
import json
from util import *


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        global historyList 
        Dialog.setObjectName("Dialog")
        Dialog.setFixedSize(540, 420)
        self.tabWidget = QtWidgets.QTabWidget(Dialog)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 545, 425))
        self.tabWidget.setInputMethodHints(QtCore.Qt.ImhNone)
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.LOGO = QtWidgets.QLabel(self.tab)
        self.LOGO.setGeometry(QtCore.QRect(0, 0, 301, 221))
        self.LOGO.setText("")
        self.LOGO.setPixmap(QtGui.QPixmap("files/mspaint_o6jhitLrxr.png"))
        self.LOGO.setObjectName("LOGO")
        self.token = QtWidgets.QLineEdit(self.tab)
        self.token.setGeometry(QtCore.QRect(10, 260, 291, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.token.setFont(font)
        self.token.setMaxLength(200)
        self.token.setEchoMode(QtWidgets.QLineEdit.Password)
        self.token.setObjectName("token")
        self.startWW = QtWidgets.QCheckBox(self.tab)
        self.startWW.setGeometry(QtCore.QRect(310, 30, 261, 51))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.startWW.setFont(font)
        self.startWW.setObjectName("startWW")
        self.stopBut = QtWidgets.QPushButton(self.tab)
        self.stopBut.setGeometry(QtCore.QRect(160, 310, 75, 23))
        self.stopBut.setObjectName("stopBut")
        self.stopBut.clicked.connect(lambda: self.stop_bot(Dialog))
        self.runBut = QtWidgets.QPushButton(self.tab)
        self.runBut.setGeometry(QtCore.QRect(60, 310, 75, 23))
        self.runBut.setObjectName("runBut")
        self.runBut.clicked.connect(lambda: self.start_bot(Dialog))

        self.ruseresonly = QtWidgets.QCheckBox(self.tab)
        self.ruseresonly.setGeometry(QtCore.QRect(310, -10, 261, 51))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.ruseresonly.setFont(font)
        self.ruseresonly.setObjectName("ruseresonly")
        self.savehistory = QtWidgets.QCheckBox(self.tab)
        self.savehistory.setGeometry(QtCore.QRect(310, 70, 261, 51))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.savehistory.setFont(font)
        self.savehistory.setChecked(True)
        self.savehistory.setObjectName("savehistory")
        self.notify = QtWidgets.QCheckBox(self.tab)
        self.notify.setGeometry(QtCore.QRect(310, 110, 261, 51))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.notify.setFont(font)
        self.notify.setChecked(True)
        self.notify.setObjectName("notify")
        self.applyBut = QtWidgets.QPushButton(self.tab)
        self.applyBut.setGeometry(QtCore.QRect(250, 260, 51, 31))
        self.applyBut.setObjectName("applyBut")
        self.applyBut.clicked.connect(self.writeToken)

        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.tabWidget.addTab(self.tab_2, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        historyList = QtWidgets.QListWidget(self.tab_3)
        historyList.setGeometry(QtCore.QRect(0, 0, 551, 341))
        historyList.setObjectName("historyList")
        self.filterLine = QtWidgets.QLineEdit(self.tab_3)
        self.filterLine.setGeometry(QtCore.QRect(10, 350, 231, 21))
        self.filterLine.setObjectName("filterLine")
        self.findBut = QtWidgets.QPushButton(self.tab_3)
        self.findBut.setGeometry(QtCore.QRect(250, 350, 75, 23))
        self.findBut.setObjectName("findBut")
        self.findBut.clicked.connect(self.findHistory)
        self.tabWidget.addTab(self.tab_3, "")
        self.tabWidget.tabBarClicked.connect(self.handle_tabbar_clicked)
        self.retranslateUi(Dialog)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
    

    def retranslateUi(self, Dialog):
        global historyList 
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Jira | status - stoped"))
        self.token.setText(_translate("Dialog", getToken()))
        self.token.setPlaceholderText(_translate("Dialog", "TOKEN"))
        self.startWW.setText(_translate("Dialog", "start with windows"))
        self.stopBut.setText(_translate("Dialog", "STOP"))
        self.applyBut.setText(_translate("Dialog", "apply"))
        self.runBut.setText(_translate("Dialog", "RUN"))
        self.ruseresonly.setText(_translate("Dialog", "registered users only"))
        self.savehistory.setText(_translate("Dialog", "save message history"))
        self.notify.setText(_translate("Dialog", "notify registered users "))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("Dialog", "setup"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("Dialog", "config"))
        self.filterLine.setPlaceholderText(_translate("Dialog", "filter"))
        self.findBut.setText(_translate("Dialog", "FIND"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("Dialog", "history"))
        __sortingEnabled = historyList.isSortingEnabled()
        historyList.setSortingEnabled(False)
        historyList.setSortingEnabled(__sortingEnabled)
    def findHistory(self):
        _translate = QtCore.QCoreApplication.translate
        if "" !=self.filterLine.text():
            historyList.clear()
            filtredHistory = []
            for i in readhistory():
                if self.filterLine.text() in i:
                    filtredHistory.append(i)
            for index, i in enumerate(filtredHistory):
                    item = QtWidgets.QListWidgetItem()
                    historyList.addItem(item)
                    item = historyList.item(index)
                    item.setText(_translate("Dialog", i))
        else:
            for index, i in enumerate(readhistory()):
                item = QtWidgets.QListWidgetItem()
                historyList.addItem(item)
                item = historyList.item(index)
                item.setText(_translate("Dialog", i))
    def handle_tabbar_clicked(self, index):
        if index == 2:
            historyList.clear()
            _translate = QtCore.QCoreApplication.translate
            for index, i in enumerate(readhistory()):
                item = QtWidgets.QListWidgetItem()
                historyList.addItem(item)
                item = historyList.item(index)
                item.setText(_translate("Dialog", i))
        
    def stop_bot(self, Dialog):
        try:
            p.terminate()
        except:pass
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Jira | status - stoped"))
    def start_bot(self, Dialog):
        from main import starter
        _translate = QtCore.QCoreApplication.translate
        global p

        p = multiprocessing.Process(target=starter,args=(getToken(),))
        p.start()
        Dialog.setWindowTitle(_translate("Dialog", "Jira | status - run"))
    def writeToken(self):
        setToken(self.token.text())
def start_ui():
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    
    sys.exit(app.exec_())

if __name__ == "__main__":
    start_ui()